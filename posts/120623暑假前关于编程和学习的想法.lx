
看邮件列表和小组就知道相对网上的同龄人还有好多东西需要学, 这不需要怀疑
看到 Ruby 中文讨论要不要为 Sublime 而学 Python 是我触动了一句话
也是一直萦绕在脑海的观点, #知识怎样分享#, 需要好多好多人的加入
现在我还没有可行的笔记分享网站的构思, 当然, 我应当那么去做
如果有文档和笔记, 后边人遇到难题通过搜索, 然后解决, 特别好的过程
而且, 编程语言特别几门动态语言相互差异很少, 借助笔记轻松就可以过渡
所以主要是文档, 文档好了, 难题可以一步步借力而登上, 成为可能

现在我对于编程语言理解大概依然错, 但比半年前应该情绪很多了
我打算罗列下零碎的印象, 以便交流甚至事后回顾我当前的观念
Python 设计得够友好, 比 Ruby 的花哨更顺手. 但 Ruby 是一个语法的源泉
Lisp 分流下来, Scheme 有 Racket 和 Guile, 前者高傲后者实用
Clojure 吸收太多 Java 的内容, 也许会成 JS 一样古怪耐用的工具
JS 怪胎, 只能怪当初设计仓促. 现在浏览器环境是最妙的编程和调试环境
因为 Webkit 工具允许直接运行代码操作图形, 未来会更美好
Haskell 为研究用语, 必学. 其基础组合子逻辑可能比 lambda 更有意思
CoffeeScript 以上像 Coco LiveScript 过于花哨, MoeScript 国人的
解析编译语言的技能很多人都会, 接触语言多的人必须努力去学会
CPS 是 Y 组合子在理论方面比较重要, 前者部署递归过程要用到
个人目前浏览器前端加 Node 用 socket.io 连接是尝试的最佳方案
Project Eular 和 4Clojure 的题我应该腾工夫去做

我之前代码操作的是语言内容的数组, 不是那种带节点的 AST
这路继续走应该没问题, 重要的是 demo. 因为实用性需要证明
有必要快点熟悉理论部分, 以便自己设计部署新的特性, 的确难点
